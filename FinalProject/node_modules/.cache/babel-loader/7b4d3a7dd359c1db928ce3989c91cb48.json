{"ast":null,"code":"class Random {\n  constructor(max = 1000, allowNegatives = true) {\n    this.max = max;\n    this.allowNegatives = allowNegatives;\n  }\n\n  randomInt(min, max) {\n    if (max > this.max) {\n      max = this.max;\n    }\n\n    if (min < 0 && !this.allowNegatives) {\n      min = 0;\n    }\n\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n}\n\nclass ColorGenerator extends Random {\n  constructor(max, allowNegatives, type = \"rgb\") {\n    super(max, allowNegatives);\n    this.typeList = [\"hex\", \"rgb\"];\n\n    if (this.typeList.includes(type)) {\n      this.type = type;\n    } else {\n      this.type = \"rgb\";\n    }\n  }\n\n  get types() {\n    return this.typeList;\n  }\n\n  set types(types = ['hex', 'rgb']) {\n    if (Array.isArray(types)) {\n      this.typeList = types.map(type => type);\n    }\n  }\n\n  color() {\n    let r = super.randomInt(0, 255);\n    let g = super.randomInt(0, 255);\n    let b = super.randomInt(0, 255);\n\n    if (this.type === 'hex') {\n      return `#${r.toString(16)}${g.toString(16)}${b.toString(16)}`;\n    } else {\n      return `rgb(${r}, ${g}, ${b})`;\n    }\n  }\n\n}\n\nexport const rando = new ColorGenerator();\nconst shakespeareApi = \"https://api.graph.cool/simple/v1/shakespeare\";\n\nlet options = () => {\n  return {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      query: `{\n        allPoems(\n          first: 1\n          skip: ${rando.randomInt(0, 160)}\n        ) {\n          title\n          author\n          lines\n          text\n        }\n      }`\n    })\n  };\n};\n\nexport async function getRandomPoem() {\n  try {\n    let result = await fetch(shakespeareApi, options());\n    let response = await result.json();\n    let poem = response.data.allPoems[0];\n    return poem.text;\n  } catch (error) {\n    console.log(\"Error in getRandomPoem\", error);\n    throw error;\n  }\n}","map":{"version":3,"sources":["C:/Users/arpit/ExerciseFiles/FinalProject/src/utils.js"],"names":["Random","constructor","max","allowNegatives","randomInt","min","Math","ceil","floor","random","ColorGenerator","type","typeList","includes","types","Array","isArray","map","color","r","g","b","toString","rando","shakespeareApi","options","method","headers","body","JSON","stringify","query","getRandomPoem","result","fetch","response","json","poem","data","allPoems","text","error","console","log"],"mappings":"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","sourcesContent":["\nclass Random {\n\n  constructor(max = 1000, allowNegatives = true) {\n    this.max = max\n    this.allowNegatives = allowNegatives\n  }\n\n  randomInt(min, max) {\n    if (max > this.max) {\n      max = this.max\n    }\n    if (min < 0 && !this.allowNegatives) {\n      min = 0\n    }\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max -min +1)) + min\n  }\n}\n\nclass ColorGenerator extends Random {\n  constructor(max, allowNegatives, type = \"rgb\") {\n    super(max, allowNegatives)\n    if (this.typeList.includes(type)) {\n      this.type = type\n    } else {\n      this.type = \"rgb\"\n    }\n  }\n\n  typeList = [\"hex\", \"rgb\"]\n\n  get types() {\n    return this.typeList\n  }\n\n  set types(types = [ 'hex', 'rgb']) {\n    if (Array.isArray(types)) {\n      this.typeList = types.map(type => type)\n    }\n  }\n\n  color() {\n    let r = super.randomInt(0,255)\n    let g = super.randomInt(0,255)\n    let b = super.randomInt(0,255)\n    if (this.type === 'hex') {\n      return `#${r.toString(16)}${g.toString(16)}${b.toString(16)}`\n    } else {\n      return `rgb(${r}, ${g}, ${b})`\n    }\n  }\n\n}\n\nexport const rando = new ColorGenerator()\n\nconst shakespeareApi = \"https://api.graph.cool/simple/v1/shakespeare\"\n\nlet options = () => {\n  return {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      query: `{\n        allPoems(\n          first: 1\n          skip: ${rando.randomInt(0,160)}\n        ) {\n          title\n          author\n          lines\n          text\n        }\n      }`\n    })\n  }\n}\n\nexport async function getRandomPoem() {\n  try {\n    let result = await fetch(shakespeareApi, options())\n    let response = await result.json()\n    let poem = response.data.allPoems[0]\n    return poem.text\n  } catch (error) {\n    console.log(\"Error in getRandomPoem\", error)\n    throw error\n  }\n}\n"]},"metadata":{},"sourceType":"module"}